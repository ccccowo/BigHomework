"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 4.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import asyncio
import os
from pathlib import Path

from paddleocr.paddleocr import PaddleOCR
from erniebot_agent.chat_models import ERNIEBot
from erniebot_agent.memory import HumanMessage, AIMessage, SystemMessage, FunctionMessage
from erniebot_agent.extensions.langchain.chat_models import ErnieBotChat

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-surj+lg0&c_jhhf%&#d(lzrqcb^+k$t-j6%n-dxg)67gpsi&hs"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    "aibot.apps.AIBotConfig",
    "ocr.apps.OcrConfig",
    "upload.apps.UploadConfig",
    "seg.apps.SegConfig",
    "rest_framework",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sites',
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "server.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 图片保存路径
SAVE_DIR = 'upload/imgs/'

APPEND_SLASH = False

PATH_TYPE = {
    'URL': 0,
    'LOCAL': 1,
}

SERVER_PATH = 'http://127.0.0.1:8000/'
IMG_DOWNLOAD_PATH = 'files/download/'

OCR_TYPE = (
    ('OTHERS', '其它'),
    ('TITLE', '标题'),
    ('INFO', '信息'),
    ('QUESTION', '题目'),
    ('HANDWRITE', '手写内容'),
)

print("\n>>> server.settings:: OCR LOADING --------------------------------------------------------------------")
OCRMachine = PaddleOCR(use_angle_cls=True, lang="ch")
print(">>> server.settings:: OCR LOADED SUCCESSFULLY √\n")

FONT_PATH = 'static/font/song.ttf'

########################################################################################################################
# ERNIE CONNECT
print("\n>>> server.settings:: ERNIE LOADING --------------------------------------------------------------------")
os.environ["EB_AGENT_ACCESS_TOKEN"] = "cc64c586e86461091fd77338bebd6a867211bfa2"
os.environ["EB_AGENT_LOGGING_LEVEL"] = "info"

ERNIE_MODEL_NAME = 'ernie-3.5'
ERNIE_MODEL = ERNIEBot(model=ERNIE_MODEL_NAME)


async def connectTest():
    ai_message = await ERNIE_MODEL.chat(messages=[HumanMessage('Hello Ernie, I am a test chat for connection.')])
    print(">>> server.settings:: ERNIE RESPOND: ", ai_message.content)


loop = asyncio.get_event_loop()
loop.run_until_complete(connectTest())
print(">>> server.settings:: ERNIE LOADED SUCCESSFULLY √\n")

MSG_LENGTH = 11
########################################################################################################################
